
import java.net.InetAddress;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DomainNameDialog.java
 *
 * Created on May 24, 2011, 1:49:18 PM
 */

/**
 *
 * @author Administrator
 */
public class DomainNameDialog extends javax.swing.JDialog {

    /** Creates new form DomainNameDialog */
    public DomainNameDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Information by Domain");
        startMethod();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        domaintextfield = new javax.swing.JTextField();
        SubmitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PacketInfoTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        PacketDataTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Domain Name");

        PacketInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time ", "Source IP", "Destination IP", "Length", "Protocol", "Data Length", "Time Stamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PacketInfoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PacketInfoTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(PacketInfoTable);

        PacketDataTextArea.setColumns(20);
        PacketDataTextArea.setRows(5);
        jScrollPane3.setViewportView(PacketDataTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(SubmitButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(domaintextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domaintextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(SubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(85, 85, 85)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(124, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        // TODO add your handling code here:
       // String []selectedIPInfo=new String[7];
        String selectedIP;
       try{
        InetAddress[] allByName = InetAddress.getAllByName(domaintextfield.getText());

      //  allByName[0].get

        try {
           for(int i=0;i<allByName.length;i++){
               selectedIP="/"+allByName[i].getHostAddress();
               System.out.println("value in selected ip is:"+ selectedIP);

            ResultSet rs=MainThread.stmt.executeQuery("select * from PacketInfo where Source_IP='"+ selectedIP + "' OR Destination_IP='" + selectedIP+"'");
            String []selectedIPInfo=new String[7];
            //SelectIPDialog sipd=new SelectIPDialog(this,false);
            while(rs.next()) {
                //rs.getDouble(index)
                 //selectedIPInfo[6]=String.valueOf((long)rs.getDouble(1));
                Double time = rs.getDouble(1);
                long timeL=new Double(time).longValue();
                selectedIPInfo[6]=String.valueOf(timeL);

                 selectedIPInfo[1]=rs.getString(2);
                 selectedIPInfo[2]=rs.getString(3);
                 selectedIPInfo[3]=rs.getString(4);
                 selectedIPInfo[4]=rs.getString(5);
                 selectedIPInfo[5]=rs.getString(6);
             System.out.println("selected ip:"+selectedIPInfo[1]);
                Date d=new Date(timeL/1000);
                           System.out.println("date"+d);
                            Calendar c = Calendar.getInstance();
                            c.setTime(d);
                       String am_pm;
                       int  month= c.get(Calendar.MONTH) + 1;
                       int  date= c.get(Calendar.DAY_OF_MONTH);
                       int  year= c.get(Calendar.YEAR);
                            int hour =c.get(Calendar.HOUR);
                            int minute = c.get(Calendar.MINUTE);
                            int second = c.get(Calendar.SECOND);
                           // int ms=c.get(Calendar.MILLISECOND);

                            if(c.get(Calendar.AM_PM) == 0)
                                    am_pm = "AM";
                            else
                                    am_pm = "PM";
                            //System.out.println("DATE: "+ date+" "+month+" "+year+" "+hour+":"+minute+":"+second+" "+am_pm);
                                selectedIPInfo[0]=date+"/"+month+"/"+year+" "+hour+":"+minute+":"+second+" "+am_pm;

                             TableAddItem(selectedIPInfo);
             //    sipd.addInfoPacketInfoTable(selectedIPInfo);
              //   sipd.setLabel(selectedIP);
               }

            }


        }
        catch (Exception ex) {

            System.out.println(" Exception  while domain "+ex);
            //Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }



       }


       catch(Exception e){
           System.out.println("Domain Name Error: "+e);
       }


    }//GEN-LAST:event_SubmitButtonActionPerformed
    public void TableAddItem(String []data){

        DefaultTableModel dtm= (DefaultTableModel)PacketInfoTable.getModel();
        dtm.addRow(data);

    }
    private void PacketInfoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PacketInfoTableMouseClicked
        // TODO add your handling code here:

        int selectedrowindex=PacketInfoTable.getSelectedRow();

        long selectedTimeStamp=Long.parseLong((String)PacketInfoTable.getValueAt(selectedrowindex,6));
        System.out.println("Selected row index:"+selectedrowindex+"select time stamp:"+selectedTimeStamp);
        FileHandler file=new FileHandler();
        String returndata = file.fileReader(String.valueOf(selectedTimeStamp));
        try {
            // ResultSet PacketData = MainThread.stmt.executeQuery("select * from PacketInfo where time_stamp=" + selectedTimeStamp);
            // if( PacketData.next())
            PacketDataTextArea.setText(returndata);
        } catch (Exception ex) {
            System.out.println("Retrieve Error: SQL "+ex);

            //Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_PacketInfoTableMouseClicked

    /**
    * @param args the command line arguments
    */
    public  void startMethod() {
     /*   java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DomainNameDialog dialog = new DomainNameDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
      * 
      */
        setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea PacketDataTextArea;
    private javax.swing.JTable PacketInfoTable;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JTextField domaintextfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

}
